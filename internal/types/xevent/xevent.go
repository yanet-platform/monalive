package xevent

import (
	"monalive/internal/types/key"
	"monalive/internal/types/weight"
)

// Handler defines a function that processes an Event, allowing for custom logic
// to be applied to events as they are handled.
type Handler func(event *Event)

// Type represents the different types of events that can occur.
type Type uint8

const (
	Enable Type = iota + 1
	Disable
	Shutdown
)

// Event represents the state and context of a health check operation.
// This struct is generated by a checker and serves as a traveling context
// that passes through different packages. As it moves along, it can be
// modified to reflect the current status of the health check.
type Event struct {
	// Type of event ([Enable], [Disable], [Shutdown]).
	Type Type
	// Load balancer real server key.
	key.Balancer
	// New status of the [key.Balancer].
	New Status
	// Initial status of the [key.Balancer].
	Init Status
}

// Status represents the state of a health check with respect to its enabled
// status and associated weight.
type Status struct {
	Enable bool
	Weight weight.Weight
}

// Merge merges the current Event with a new one. If the New status of the new
// event matches the Init status of the current event, the event is marked for
// removal (returning true). Otherwise, the New status is updated and the event
// is retained (returning false).
//
// This method implemented in order to Event type can be used in
// [event.Registry].
func (event *Event) Merge(newEvent *Event) (result *Event, remove bool) {
	if newEvent.New == event.Init {
		// If the new event's status matches the initial status, the event
		// should be removed.
		return nil, true
	}

	// Update the event's New status and retain the event.
	event.New = newEvent.New
	return event, false
}
